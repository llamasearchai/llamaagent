# Production-Ready LlamaAgent Docker Image
# Multi-stage build for optimized production deployment
# Author: Nik Jois <nikjois@llamasearch.ai>

# =====================================
# Stage 1: Build Dependencies
# =====================================
FROM python:3.11-slim as builder

# Set environment variables
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1

# Install system dependencies for building
RUN apt-get update && apt-get install -y \
    build-essential \
    curl \
    git \
    && rm -rf /var/lib/apt/lists/*

# Create virtual environment
RUN python -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Copy requirements and install Python dependencies
COPY requirements.txt requirements-dev.txt ./
RUN pip install --upgrade pip setuptools wheel && \
    pip install -r requirements.txt && \
    pip install -r requirements-dev.txt

# =====================================
# Stage 2: Production Runtime
# =====================================
FROM python:3.11-slim as production

# Set environment variables
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PATH="/opt/venv/bin:$PATH" \
    DEBIAN_FRONTEND=noninteractive

# Install runtime dependencies
RUN apt-get update && apt-get install -y \
    curl \
    ca-certificates \
    dumb-init \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Create non-root user for security
RUN groupadd -r llamaagent && \
    useradd -r -g llamaagent -d /app -s /bin/bash llamaagent

# Copy virtual environment from builder stage
COPY --from=builder /opt/venv /opt/venv

# Set working directory
WORKDIR /app

# Copy application code
COPY --chown=llamaagent:llamaagent . .

# Create necessary directories
RUN mkdir -p /app/logs /app/data /app/cache && \
    chown -R llamaagent:llamaagent /app

# Switch to non-root user
USER llamaagent

# Health check
HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

# Expose port
EXPOSE 8000

# Use dumb-init to handle signals properly
ENTRYPOINT ["dumb-init", "--"]

# Start the application
CMD ["python", "production_fastapi_app.py"]

# =====================================
# Stage 3: Development Image
# =====================================
FROM production as development

# Switch back to root for development tools
USER root

# Install development dependencies
RUN apt-get update && apt-get install -y \
    vim \
    htop \
    net-tools \
    procps \
    && rm -rf /var/lib/apt/lists/*

# Install additional development Python packages
RUN pip install \
    jupyter \
    ipython \
    black \
    flake8 \
    mypy \
    pytest-cov \
    pytest-asyncio

# Switch back to llamaagent user
USER llamaagent

# Override CMD for development
CMD ["python", "production_fastapi_app.py"]

# =====================================
# Stage 4: Testing Image
# =====================================
FROM development as testing

# Copy test files
COPY --chown=llamaagent:llamaagent tests/ ./tests/
COPY --chown=llamaagent:llamaagent test_production_app.py ./

# Run tests by default
CMD ["python", "-m", "pytest", "test_production_app.py", "-v"]