version: '3.8'

services:
  # Main LlamaAgent service with comprehensive OpenAI integration
  llamaagent-openai:
    build:
      context: .
      dockerfile: Dockerfile.openai
    container_name: llamaagent-openai
    ports:
      - "8000:8000"
      - "8001:8001"  # Additional port for monitoring
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OPENAI_ORGANIZATION=${OPENAI_ORGANIZATION:-}
      - LLAMAAGENT_BUDGET_LIMIT=${LLAMAAGENT_BUDGET_LIMIT:-100.0}
      - LLAMAAGENT_LOG_LEVEL=${LLAMAAGENT_LOG_LEVEL:-INFO}
      - LLAMAAGENT_ENABLE_TRACING=${LLAMAAGENT_ENABLE_TRACING:-true}
      - LLAMAAGENT_ENABLE_MONITORING=${LLAMAAGENT_ENABLE_MONITORING:-true}
      - POSTGRES_HOST=postgres
      - POSTGRES_DB=llamaagent
      - POSTGRES_USER=llamaagent
      - POSTGRES_PASSWORD=llamaagent_password
      - REDIS_URL=redis://redis:6379/0
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./temp:/app/temp
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL database for storing usage, results, and metadata
  postgres:
    image: postgres:15
    container_name: llamaagent-postgres
    environment:
      - POSTGRES_DB=llamaagent
      - POSTGRES_USER=llamaagent
      - POSTGRES_PASSWORD=llamaagent_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U llamaagent"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: llamaagent-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Monitoring and observability with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: llamaagent-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: llamaagent-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    restart: unless-stopped

  # Nginx reverse proxy for load balancing and SSL termination
  nginx:
    image: nginx:alpine
    container_name: llamaagent-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - llamaagent-openai
    restart: unless-stopped

  # File storage service for audio, images, and other media
  minio:
    image: minio/minio:latest
    container_name: llamaagent-minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=llamaagent
      - MINIO_ROOT_PASSWORD=llamaagent_minio_password
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: llamaagent-jaeger
    ports:
      - "16686:16686"
      - "14268:14268"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    restart: unless-stopped

  # Background task worker for processing queued tasks
  worker:
    build:
      context: .
      dockerfile: Dockerfile.openai
    container_name: llamaagent-worker
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OPENAI_ORGANIZATION=${OPENAI_ORGANIZATION:-}
      - LLAMAAGENT_BUDGET_LIMIT=${LLAMAAGENT_BUDGET_LIMIT:-100.0}
      - LLAMAAGENT_LOG_LEVEL=${LLAMAAGENT_LOG_LEVEL:-INFO}
      - POSTGRES_HOST=postgres
      - POSTGRES_DB=llamaagent
      - POSTGRES_USER=llamaagent
      - POSTGRES_PASSWORD=llamaagent_password
      - REDIS_URL=redis://redis:6379/0
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./temp:/app/temp
    depends_on:
      - postgres
      - redis
    command: python -m llamaagent.worker.background_tasks
    restart: unless-stopped

  # Scheduler for periodic tasks
  scheduler:
    build:
      context: .
      dockerfile: Dockerfile.openai
    container_name: llamaagent-scheduler
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - POSTGRES_HOST=postgres
      - POSTGRES_DB=llamaagent
      - POSTGRES_USER=llamaagent
      - POSTGRES_PASSWORD=llamaagent_password
      - REDIS_URL=redis://redis:6379/0
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
    depends_on:
      - postgres
      - redis
    command: python -m llamaagent.scheduler.periodic_tasks
    restart: unless-stopped

  # Testing service for continuous integration
  test-runner:
    build:
      context: .
      dockerfile: Dockerfile.openai
    container_name: llamaagent-test-runner
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - POSTGRES_HOST=postgres
      - POSTGRES_DB=llamaagent_test
      - POSTGRES_USER=llamaagent
      - POSTGRES_PASSWORD=llamaagent_password
      - REDIS_URL=redis://redis:6379/1
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./test_results:/app/test_results
    depends_on:
      - postgres
      - redis
    command: python -m pytest tests/ -v --tb=short --junitxml=/app/test_results/junit.xml
    profiles:
      - testing

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  minio_data:
    driver: local

networks:
  default:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 