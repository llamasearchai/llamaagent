{
  "summary": {
    "total_files_analyzed": 335,
    "files_with_errors": 63,
    "files_fixed": 0,
    "files_need_manual_fix": 63
  },
  "fixed_files": [],
  "manual_intervention_needed": [
    "complete_spre_demo.py",
    "comprehensive_diagnostic_system.py",
    "comprehensive_fixer.py",
    "comprehensive_syntax_fix.py",
    "fastapi_app.py",
    "production_demo.py",
    "simple_diagnostic_system.py",
    "src/llamaagent/agents/multimodal_reasoning.py",
    "src/llamaagent/agents/reasoning_chains.py",
    "src/llamaagent/api/openai_comprehensive_api.py",
    "src/llamaagent/api/production_app.py",
    "src/llamaagent/api/shell_endpoints.py",
    "src/llamaagent/api/simon_ecosystem_api.py",
    "src/llamaagent/benchmarks/frontier_evaluation.py",
    "src/llamaagent/benchmarks/gaia_benchmark.py",
    "src/llamaagent/benchmarks/spre_evaluator.py",
    "src/llamaagent/cache/advanced_cache.py",
    "src/llamaagent/cache/llm_cache.py",
    "src/llamaagent/cache/query_optimizer.py",
    "src/llamaagent/cli/code_generator.py",
    "src/llamaagent/cli/config_manager.py",
    "src/llamaagent/cli/diagnostics_cli.py",
    "src/llamaagent/cli/enhanced_cli.py",
    "src/llamaagent/cli/enhanced_shell_cli.py",
    "src/llamaagent/cli/function_manager.py",
    "src/llamaagent/cli/interactive.py",
    "src/llamaagent/cli/llm_cmd.py",
    "src/llamaagent/cli/main.py",
    "src/llamaagent/cli/openai_cli.py",
    "src/llamaagent/cli/role_manager.py",
    "src/llamaagent/data_generation/agentic_pipelines.py",
    "src/llamaagent/data_generation/base.py",
    "src/llamaagent/data_generation/gdt.py",
    "src/llamaagent/diagnostics/code_analyzer.py",
    "src/llamaagent/diagnostics/dependency_checker.py",
    "src/llamaagent/diagnostics/master_diagnostics.py",
    "src/llamaagent/diagnostics/system_validator.py",
    "src/llamaagent/evaluation/benchmark_engine.py",
    "src/llamaagent/evaluation/golden_dataset.py",
    "src/llamaagent/evaluation/model_comparison.py",
    "src/llamaagent/evolution/adaptive_learning.py",
    "src/llamaagent/integration/_openai_stub.py",
    "src/llamaagent/integration/simon_tools.py",
    "src/llamaagent/knowledge/knowledge_generator.py",
    "src/llamaagent/ml/inference_engine.py",
    "src/llamaagent/monitoring/advanced_monitoring.py",
    "src/llamaagent/monitoring/alerting.py",
    "src/llamaagent/monitoring/metrics_collector.py",
    "src/llamaagent/monitoring/middleware.py",
    "src/llamaagent/optimization/performance.py",
    "src/llamaagent/optimization/prompt_optimizer.py",
    "src/llamaagent/orchestration/adaptive_orchestra.py",
    "src/llamaagent/prompting/dspy_optimizer.py",
    "src/llamaagent/prompting/optimization.py",
    "src/llamaagent/prompting/prompt_templates.py",
    "src/llamaagent/reasoning/chain_engine.py",
    "src/llamaagent/reasoning/memory_manager.py",
    "src/llamaagent/routing/metrics.py",
    "src/llamaagent/routing/provider_registry.py",
    "src/llamaagent/routing/strategies.py",
    "src/llamaagent/routing/task_analyzer.py",
    "src/llamaagent/security/rate_limiter.py",
    "src/llamaagent/security/validator.py"
  ],
  "error_details": [
    {
      "file": "src/llamaagent/cache/llm_cache.py",
      "line": 205,
      "type": "SyntaxError",
      "message": "invalid syntax (<unknown>, line 205)",
      "snippet": " 203: \n 204:     async def set(\n 205:         self, messages: List[LLMMessage], response: LLMResponse, **kwargs)\n 206:     ) -> None:\n 207:         \"\"\"Cache LLM response\"\"\""
    },
    {
      "file": "src/llamaagent/cache/query_optimizer.py",
      "line": 147,
      "type": "SyntaxError",
      "message": "invalid syntax (<unknown>, line 147)",
      "snippet": " 145:                 )\n 146:                 plans.extend([plan] * len(group)\n 147:             else:\n 148:                 # Single query\n 149:                 plan = await self.optimize_query(group[0], context)"
    },
    {
      "file": "src/llamaagent/cache/advanced_cache.py",
      "line": 300,
      "type": "IndentationError",
      "message": "expected an indented block (<unknown>, line 300)",
      "snippet": " 298:             self.stats.evictions = stats.get(\"evictions\", 0)\n 299:         except Exception as e:\n 300:         logger.error(f\"Error: {e}\")  # Ignore load errors\n 301: \n 302:     def _estimate_size(self, value: Any) -> int:"
    },
    {
      "file": "src/llamaagent/security/validator.py",
      "line": 81,
      "type": "SyntaxError",
      "message": "invalid syntax (<unknown>, line 81)",
      "snippet": "  79: \n  80:     @classmethod\n  81:     def validate_url(cls, value: str) -> bool:\n  82:         \"\"\"Validate URL.\"\"\"\n  83:         return bool(cls.URL_PATTERN.match(str(value))"
    },
    {
      "file": "src/llamaagent/security/rate_limiter.py",
      "line": 120,
      "type": "SyntaxError",
      "message": "invalid syntax (<unknown>, line 120)",
      "snippet": " 118:         \"\"\"Get retry after time in seconds.\"\"\"\n 119:         requests = self.requests.get(identifier, deque()\n 120:         if requests:\n 121:             oldest_request = requests[0]\n 122:             return oldest_request + self.rule.window_seconds - time.time()"
    },
    {
      "file": "src/llamaagent/integration/_openai_stub.py",
      "line": 53,
      "type": "SyntaxError",
      "message": "invalid syntax (<unknown>, line 53)",
      "snippet": "  51:     object: str = \"chat.completion\"\n  52:     created: int = field(default_factory=lambda: int(time.time())\n  53:     model: str = \"gpt-4\"\n  54:     choices: List[MockChatCompletionChoice] = field(default_factory=list)\n  55:     usage: MockChatCompletionUsage = field("
    },
    {
      "file": "src/llamaagent/integration/simon_tools.py",
      "line": 594,
      "type": "SyntaxError",
      "message": "invalid syntax (<unknown>, line 594)",
      "snippet": " 592:         return list(self.tools.keys()\n 593:     \n 594:     def get_registry(self) -> Dict[str, Tool]:\n 595:         \"\"\"Get the complete tool registry\"\"\"\n 596:         return self.tools.copy()"
    },
    {
      "file": "src/llamaagent/agents/reasoning_chains.py",
      "line": 130,
      "type": "SyntaxError",
      "message": "invalid syntax (<unknown>, line 130)",
      "snippet": " 128:             )\n 129: \n 130:     async def _chain_of_thought(self, task_input: TaskInput) -> LLMResponse:\n 131:         \"\"\"Chain-of-thought reasoning implementation.\"\"\"\n 132:         "
    },
    {
      "file": "src/llamaagent/agents/multimodal_reasoning.py",
      "line": 110,
      "type": "SyntaxError",
      "message": "invalid syntax (<unknown>, line 110)",
      "snippet": " 108:             )\n 109: \n 110:     def _parse_input(self, task_input: TaskInput) -> ModalityInput:\n 111:         \"\"\"Parse task input into different modalities.\"\"\"\n 112:         text_input = None"
    },
    {
      "file": "src/llamaagent/cli/enhanced_shell_cli.py",
      "line": 73,
      "type": "SyntaxError",
      "message": "invalid syntax (<unknown>, line 73)",
      "snippet": "  71:     \"\"\"Display response in a panel.\"\"\"\n  72:     panel = Panel(response, border_style=color, padding=(1, 2)\n  73:     console.print(panel)\n  74: \n  75: "
    },
    {
      "file": "src/llamaagent/cli/enhanced_cli.py",
      "line": 160,
      "type": "SyntaxError",
      "message": "invalid syntax (<unknown>, line 160)",
      "snippet": " 158:         )\n 159:     \n 160:     def show_help(self) -> None:\n 161:         \"\"\"Show help message.\"\"\"\n 162:         if not RICH_AVAILABLE:"
    },
    {
      "file": "src/llamaagent/cli/config_manager.py",
      "line": 197,
      "type": "SyntaxError",
      "message": "invalid syntax (<unknown>, line 197)",
      "snippet": " 195:             decrypted_data = self.cipher.decrypt(encrypted_data)\n 196:             return json.loads(decrypted_data.decode()\n 197:         except Exception as e:\n 198:             logger.error(f\"Error loading secrets: {e}\")\n 199:             return {}"
    },
    {
      "file": "src/llamaagent/cli/role_manager.py",
      "line": 58,
      "type": "SyntaxError",
      "message": "invalid syntax (<unknown>, line 58)",
      "snippet": "  56:         self.custom_roles.update(self._load_custom_roles()\n  57:     \n  58:     def _create_builtin_roles(self) -> None:\n  59:         \"\"\"Create built-in role configurations.\"\"\"\n  60:         builtin_roles = {"
    },
    {
      "file": "src/llamaagent/cli/function_manager.py",
      "line": 136,
      "type": "SyntaxError",
      "message": "invalid syntax (<unknown>, line 136)",
      "snippet": " 134:         return list(self.functions.keys()\n 135:     \n 136:     def get_function_info(self, name: str) -> Dict[str, Any]:\n 137:         \"\"\"Get information about a function.\"\"\"\n 138:         if name not in self.functions:"
    },
    {
      "file": "src/llamaagent/cli/openai_cli.py",
      "line": 101,
      "type": "SyntaxError",
      "message": "invalid syntax (<unknown>, line 101)",
      "snippet": "  99: \n 100: \n 101: def estimate_cost(tokens: int, model: str) -> float:\n 102:     \"\"\"Estimate cost based on tokens and model.\"\"\"\n 103:     cost_per_1k_tokens = {"
    },
    {
      "file": "src/llamaagent/cli/diagnostics_cli.py",
      "line": 78,
      "type": "SyntaxError",
      "message": "invalid syntax (<unknown>, line 78)",
      "snippet": "  76: \n  77:     # Run analysis with progress bar\n  78:     with Progress(\n  79:         SpinnerColumn(),\n  80:         TextColumn(\"[progress.description]{task.description}\"),"
    },
    {
      "file": "src/llamaagent/cli/interactive.py",
      "line": 209,
      "type": "SyntaxError",
      "message": "invalid syntax (<unknown>, line 209)",
      "snippet": " 207:         config_table.add_row(\"Temperature\", str(self.config.llm.temperature)\n 208:         \n 209:         console.print(config_table)\n 210: \n 211:     async def show_status(self) -> None:"
    },
    {
      "file": "src/llamaagent/cli/main.py",
      "line": 420,
      "type": "SyntaxError",
      "message": "invalid syntax (<unknown>, line 420)",
      "snippet": " 418: \n 419: @app.command()\n 420: def version() -> None:\n 421:     \"\"\"Show version information.\"\"\"\n 422: "
    },
    {
      "file": "src/llamaagent/cli/llm_cmd.py",
      "line": 194,
      "type": "IndentationError",
      "message": "expected an indented block (<unknown>, line 194)",
      "snippet": " 192:             providers[\"ollama\"] = self._get_ollama_models()\n 193:         except Exception as e:\n 194:         logger.error(f\"Error: {e}\")\n 195: \n 196:         return providers"
    },
    {
      "file": "src/llamaagent/cli/code_generator.py",
      "line": 85,
      "type": "SyntaxError",
      "message": "invalid syntax (<unknown>, line 85)",
      "snippet": "  83:         \n  84:         # Generate filename\n  85:         filename = self._generate_filename(request.prompt, request.language)\n  86:         \n  87:         # Extract dependencies"
    },
    {
      "file": "src/llamaagent/api/production_app.py",
      "line": 237,
      "type": "SyntaxError",
      "message": "invalid syntax (<unknown>, line 237)",
      "snippet": " 235:             if hasattr(response, \"body\"):\n 236:                 content = json.loads(response.body.decode()\n 237:                 app_state[\"cache\"][cache_key] = {\n 238:                     \"content\": content,\n 239:                     \"status_code\": response.status_code,"
    },
    {
      "file": "src/llamaagent/api/openai_comprehensive_api.py",
      "line": 155,
      "type": "SyntaxError",
      "message": "invalid syntax (<unknown>, line 155)",
      "snippet": " 153:     if tool_type not in tools:\n 154:         tools[tool_type] = create_openai_tool(tool_type, get_integration()\n 155:     return tools[tool_type]\n 156: \n 157: "
    },
    {
      "file": "src/llamaagent/api/shell_endpoints.py",
      "line": 486,
      "type": "SyntaxError",
      "message": "invalid syntax (<unknown>, line 486)",
      "snippet": " 484:         \n 485:         # Log in background\n 486:         background_tasks.add_task(_log_function_call, request, function_response)\n 487:         \n 488:         return function_response"
    },
    {
      "file": "src/llamaagent/api/simon_ecosystem_api.py",
      "line": 288,
      "type": "SyntaxError",
      "message": "f-string: closing parenthesis '}' does not match opening parenthesis '(' (<unknown>, line 288)",
      "snippet": " 286:         def share_resource(self, resource_type: str, resource_data: Dict[str, Any]) -> str:\n 287:             \"\"\"Share a resource in the ecosystem.\"\"\"\n 288:             resource_id = f\"resource_{str(uuid.uuid4()[:8]}\"\n 289:             self.shared_resources[resource_id] = {\n 290:                 \"resource_id\": resource_id,"
    },
    {
      "file": "src/llamaagent/prompting/dspy_optimizer.py",
      "line": 284,
      "type": "SyntaxError",
      "message": "invalid syntax (<unknown>, line 284)",
      "snippet": " 282:                 # Simple scoring based on output length and completeness\n 283:                 score = len(str(call[\"output\"])\n 284:                 scored_examples.append({\n 285:                     \"input\": call[\"input\"],\n 286:                     \"output\": call[\"output\"],"
    },
    {
      "file": "src/llamaagent/prompting/prompt_templates.py",
      "line": 46,
      "type": "SyntaxError",
      "message": "invalid syntax (<unknown>, line 46)",
      "snippet": "  44:         # Check all required variables are provided\n  45:         missing = set(self.variables) - set(kwargs.keys()\n  46:         if missing:\n  47:             raise ValueError(f\"Missing required variables: {missing}\")\n  48: "
    },
    {
      "file": "src/llamaagent/prompting/optimization.py",
      "line": 238,
      "type": "IndentationError",
      "message": "unexpected indent (<unknown>, line 238)",
      "snippet": " 236:         # Add original\n 237:         population.append()\n 238:             PromptCandidate(\n 239:                 template=initial_prompt,\n 240:                 variables=self._extract_variables(initial_prompt),"
    },
    {
      "file": "src/llamaagent/optimization/prompt_optimizer.py",
      "line": 386,
      "type": "SyntaxError",
      "message": "invalid syntax (<unknown>, line 386)",
      "snippet": " 384:         crossover_point = random.randint(1, min(len(p1_words), len(p2_words) - 1)\n 385:         \n 386:         if random.random() < 0.5:\n 387:             child_words = p1_words[:crossover_point] + p2_words[crossover_point:]\n 388:         else:"
    },
    {
      "file": "src/llamaagent/optimization/performance.py",
      "line": 83,
      "type": "SyntaxError",
      "message": "invalid syntax (<unknown>, line 83)",
      "snippet": "  81:             self._monitor_task = asyncio.create_task(self._monitor_loop()\n  82:             \n  83:     async def stop_monitoring(self) -> None:\n  84:         \"\"\"Stop resource monitoring.\"\"\"\n  85:         self._monitoring = False"
    },
    {
      "file": "src/llamaagent/reasoning/memory_manager.py",
      "line": 210,
      "type": "SyntaxError",
      "message": "invalid syntax (<unknown>, line 210)",
      "snippet": " 208:                 if data:\n 209:                     item = MemoryItem.from_dict(json.loads(data)\n 210:                     item.access()\n 211:                     return item\n 212:             except Exception as e:"
    },
    {
      "file": "src/llamaagent/reasoning/chain_engine.py",
      "line": 54,
      "type": "SyntaxError",
      "message": "invalid syntax (<unknown>, line 54)",
      "snippet": "  52:     \"\"\"Represents a single thought/reasoning step\"\"\"\n  53:     id: str = field(default_factory=lambda: str(uuid.uuid4())\n  54:     thought: str = \"\"\n  55:     reasoning_type: ReasoningType = ReasoningType.DEDUCTIVE\n  56:     confidence: float = 0.0"
    },
    {
      "file": "src/llamaagent/knowledge/knowledge_generator.py",
      "line": 652,
      "type": "SyntaxError",
      "message": "invalid syntax (<unknown>, line 652)",
      "snippet": " 650:         words = item.content.split()\n 651:         unique_words = len(set(words)\n 652:         total_words = len(words)\n 653:         diversity_score = unique_words / total_words if total_words > 0 else 0\n 654:         score += 0.25 * diversity_score"
    },
    {
      "file": "src/llamaagent/ml/inference_engine.py",
      "line": 454,
      "type": "SyntaxError",
      "message": "invalid syntax (<unknown>, line 454)",
      "snippet": " 452:                 if result.error:\n 453:                     future.set_exception(Exception(result.error)\n 454:                 else:\n 455:                     future.set_result(result)\n 456: "
    },
    {
      "file": "src/llamaagent/evolution/adaptive_learning.py",
      "line": 123,
      "type": "SyntaxError",
      "message": "invalid syntax (<unknown>, line 123)",
      "snippet": " 121:                 py_files = list(repo_dir.rglob(\"*.py\")\n 122:                 \n 123:                 for py_file in py_files[:10]:  # Limit for demo\n 124:                     try:\n 125:                         with open(py_file, 'r', encoding='utf-8') as f:"
    },
    {
      "file": "src/llamaagent/benchmarks/frontier_evaluation.py",
      "line": 108,
      "type": "IndentationError",
      "message": "unexpected indent (<unknown>, line 108)",
      "snippet": " 106:         # Basic arithmetic\n 107:         tasks.append()\n 108:             EvaluationTask(\n 109:                 task_id=\"math_basic_001\",\n 110:                 domain=TaskDomain.MATHEMATICS,"
    },
    {
      "file": "src/llamaagent/benchmarks/gaia_benchmark.py",
      "line": 433,
      "type": "IndentationError",
      "message": "unexpected indent (<unknown>, line 433)",
      "snippet": " 431:                 # Add failed result\n 432:                 results.append()\n 433:                     GAIAResult(\n 434:                         task_id=task.task_id,\n 435:                         question=task.question,"
    },
    {
      "file": "src/llamaagent/benchmarks/spre_evaluator.py",
      "line": 57,
      "type": "SyntaxError",
      "message": "invalid syntax (<unknown>, line 57)",
      "snippet": "  55: \n  56:     @property\n  57:     def avg_api_calls(self) -> float:\n  58:         \"\"\"Average API calls per task.\"\"\"\n  59:         if not self.task_results:"
    },
    {
      "file": "src/llamaagent/diagnostics/dependency_checker.py",
      "line": 115,
      "type": "IndentationError",
      "message": "unexpected indent (<unknown>, line 115)",
      "snippet": " 113:                 else:\n 114:                     issues.append()\n 115:                         {\n 116:                             \"line\": line_no,\n 117:                             \"content\": line,"
    },
    {
      "file": "src/llamaagent/diagnostics/master_diagnostics.py",
      "line": 364,
      "type": "SyntaxError",
      "message": "invalid syntax (<unknown>, line 364)",
      "snippet": " 362:             try:\n 363:                 importlib.import_module(dep.replace(\"-\", \"_\")\n 364:             except ImportError:\n 365:                 self._add_problem(\n 366:                     severity=ProblemSeverity.MEDIUM,"
    },
    {
      "file": "src/llamaagent/diagnostics/system_validator.py",
      "line": 57,
      "type": "IndentationError",
      "message": "unexpected indent (<unknown>, line 57)",
      "snippet": "  55:         if version_info.major < 3:\n  56:             result[\"issues\"].append()\n  57:                 {\n  58:                     \"severity\": \"CRITICAL\",\n  59:                     \"message\": \"Python 2 is not supported\","
    },
    {
      "file": "src/llamaagent/diagnostics/code_analyzer.py",
      "line": 63,
      "type": "SyntaxError",
      "message": "invalid syntax (<unknown>, line 63)",
      "snippet": "  61:                 \"complexity_metrics\": {},\n  62:                 \"line_count\": len(content.splitlines(),\n  63:                 \"char_count\": len(content),\n  64:             }\n  65: "
    },
    {
      "file": "src/llamaagent/orchestration/adaptive_orchestra.py",
      "line": 128,
      "type": "SyntaxError",
      "message": "invalid syntax (<unknown>, line 128)",
      "snippet": " 126: \n 127: \n 128: class CodeSpecialistAgent(BaseAgent):\n 129:     \"\"\"Agent specialized in code generation and analysis.\"\"\"\n 130:     "
    },
    {
      "file": "src/llamaagent/evaluation/benchmark_engine.py",
      "line": 195,
      "type": "SyntaxError",
      "message": "invalid syntax (<unknown>, line 195)",
      "snippet": " 193:         dataset_name: str,\n 194:         sample_limit: Optional[int] = None,\n 195:         config: Optional[Dict[str, Any]] = None)\n 196:     ) -> None:\n 197:         \"\"\"Create benchmark from golden dataset\"\"\""
    },
    {
      "file": "src/llamaagent/evaluation/golden_dataset.py",
      "line": 77,
      "type": "SyntaxError",
      "message": "invalid syntax (<unknown>, line 77)",
      "snippet": "  75:         )\n  76:     \n  77:     def to_dict(self) -> Dict[str, Any]:\n  78:         \"\"\"Convert to dictionary\"\"\"\n  79:         return {"
    },
    {
      "file": "src/llamaagent/evaluation/model_comparison.py",
      "line": 284,
      "type": "SyntaxError",
      "message": "invalid syntax (<unknown>, line 284)",
      "snippet": " 282:             if hasattr(result, 'overall_metrics'):\n 283:                 for metric, value in result.overall_metrics.items():\n 284:                     if isinstance(value, (int, float):\n 285:                         all_metrics[metric].append(value)\n 286:             elif isinstance(result, dict):"
    },
    {
      "file": "src/llamaagent/routing/metrics.py",
      "line": 67,
      "type": "SyntaxError",
      "message": "invalid syntax (<unknown>, line 67)",
      "snippet": "  65: \n  66:     @property\n  67:     def success_rate(self) -> float:\n  68:         \"\"\"Calculate success rate.\"\"\"\n  69:         if self.total_requests == 0:"
    },
    {
      "file": "src/llamaagent/routing/task_analyzer.py",
      "line": 308,
      "type": "SyntaxError",
      "message": "invalid syntax (<unknown>, line 308)",
      "snippet": " 306:         for task_type, patterns in self.task_type_patterns.items():\n 307:             score = sum(1 for pattern in patterns if re.search(pattern, task_lower)\n 308:             if score > 0:\n 309:                 scores[task_type] = score\n 310: "
    },
    {
      "file": "src/llamaagent/routing/strategies.py",
      "line": 451,
      "type": "IndentationError",
      "message": "unexpected indent (<unknown>, line 451)",
      "snippet": " 449: \n 450:                 eligible_providers.append()\n 451:                     (\n 452:                         provider_id,\n 453:                         cost,"
    },
    {
      "file": "src/llamaagent/routing/provider_registry.py",
      "line": 391,
      "type": "SyntaxError",
      "message": "invalid syntax (<unknown>, line 391)",
      "snippet": " 389:         return list(self.providers.keys()\n 390: \n 391:     def get_active_providers(self) -> List[str]:\n 392:         \"\"\"Get list of active provider IDs.\"\"\"\n 393:         return ["
    },
    {
      "file": "src/llamaagent/data_generation/agentic_pipelines.py",
      "line": 390,
      "type": "SyntaxError",
      "message": "invalid syntax (<unknown>, line 390)",
      "snippet": " 388:         return {\n 389:             \"score\": max(0.0, min(1.0, score),\n 390:             \"issues\": issues,\n 391:             \"suggestions\": suggestions\n 392:         }"
    },
    {
      "file": "src/llamaagent/data_generation/gdt.py",
      "line": 132,
      "type": "IndentationError",
      "message": "unexpected indent (<unknown>, line 132)",
      "snippet": " 130:             )\n 131:             proposals.append()\n 132:                 {\n 133:                     \"content\": researcher_response.content,\n 134:                     \"role\": AgentRole.RESEARCHER.value,"
    },
    {
      "file": "src/llamaagent/data_generation/base.py",
      "line": 37,
      "type": "SyntaxError",
      "message": "invalid syntax (<unknown>, line 37)",
      "snippet": "  35: \n  36:     node_id: str = field(default_factory=lambda: str(uuid.uuid4())\n  37:     parent_id: Optional[str] = None\n  38:     proposal: str = \"\"  # The reasoning step or argument\n  39:     proposing_agent_role: str = \"generalist\""
    },
    {
      "file": "src/llamaagent/monitoring/metrics_collector.py",
      "line": 410,
      "type": "SyntaxError",
      "message": "invalid syntax (<unknown>, line 410)",
      "snippet": " 408:         for name in metric_names:\n 409:             setattr(self, name, MockMetric()\n 410:             self.metrics[name] = getattr(self, name)\n 411:     \n 412:     def record_http_request(self, method: str, endpoint: str, status_code: int, duration: float):"
    },
    {
      "file": "src/llamaagent/monitoring/advanced_monitoring.py",
      "line": 27,
      "type": "SyntaxError",
      "message": "invalid syntax (<unknown>, line 27)",
      "snippet": "  25: from email.mime.text import MimeText\n  26: from enum import Enum\n  27: from typing import 0\", 100\", \"\", \"<, \"==\n  28: \n  29:     threshold: float, severity: AlertSeverity, channels: List[AlertChannel]"
    },
    {
      "file": "src/llamaagent/monitoring/alerting.py",
      "line": 154,
      "type": "SyntaxError",
      "message": "invalid syntax (<unknown>, line 154)",
      "snippet": " 152:             self._aggregation_task = asyncio.create_task(self._aggregation_loop()\n 153:     \n 154:     def stop(self) -> None:\n 155:         \"\"\"Stop the alert manager\"\"\"\n 156:         if self._aggregation_task:"
    },
    {
      "file": "src/llamaagent/monitoring/middleware.py",
      "line": 167,
      "type": "SyntaxError",
      "message": "invalid syntax (<unknown>, line 167)",
      "snippet": " 165:         \n 166:         # Log request start\n 167:         request_info = {\n 168:             \"request_id\": request_id,\n 169:             \"method\": request.method,"
    },
    {
      "file": "comprehensive_syntax_fix.py",
      "line": 39,
      "type": "SyntaxError",
      "message": "unexpected character after line continuation character (<unknown>, line 39)",
      "snippet": "  37:             try:\n  38:                 ast.parse(fixed_content)\n  39:                 if fixed_content \\!= content:\n  40:                     with open(file_path, 'w', encoding='utf-8') as f:\n  41:                         f.write(fixed_content)"
    },
    {
      "file": "comprehensive_fixer.py",
      "line": 387,
      "type": "SyntaxError",
      "message": "EOL while scanning string literal (<unknown>, line 387)",
      "snippet": " 385:             silent_failure_fixes = [\n 386:                 # Replace \"except Exception as e:\n 387:         logger.error(f\"Error: {e}\")\" with proper logging\n 388:                 (r'except:\\s*pass', 'except Exception as e:\\n        logger.error(f\"Error: {e}\")'),\n 389:                 # Replace \"except Exception as e:"
    },
    {
      "file": "complete_spre_demo.py",
      "line": 74,
      "type": "IndentationError",
      "message": "expected an indented block (<unknown>, line 74)",
      "snippet": "  72:         else:\n  73:                         \n  74:     def _check_ollama(self) -> bool:\n  75:         \"\"\"Check if Ollama is available.\"\"\"\n  76:         try:"
    },
    {
      "file": "comprehensive_diagnostic_system.py",
      "line": 401,
      "type": "IndentationError",
      "message": "expected an indented block (<unknown>, line 401)",
      "snippet": " 399:             \n 400:             except Exception as e:\n 401:         logger.error(f\"Error: {e}\")  # File read errors already handled elsewhere\n 402:     \n 403:     def run_static_analysis(self) -> None:"
    },
    {
      "file": "fastapi_app.py",
      "line": 219,
      "type": "IndentationError",
      "message": "expected an indented block (<unknown>, line 219)",
      "snippet": " 217:             providers_available.append(provider_name)\n 218:         except Exception as e:\n 219:         logger.error(f\"Error: {e}\")\n 220:     \n 221:     return HealthCheckResponse("
    },
    {
      "file": "simple_diagnostic_system.py",
      "line": 182,
      "type": "IndentationError",
      "message": "expected an indented block (<unknown>, line 182)",
      "snippet": " 180:         \n 181:         except Exception as e:\n 182:         logger.error(f\"Error: {e}\")  # AST parsing already checked in analyze_python_syntax\n 183:     \n 184:     def analyze_configuration(self) -> None:"
    },
    {
      "file": "production_demo.py",
      "line": 119,
      "type": "SyntaxError",
      "message": "invalid syntax (<unknown>, line 119)",
      "snippet": " 117:                 \n 118:         # Create React Agent\n 119:         react_config = AgentConfig(\n 120:             name=\"DemoReactAgent\",\n 121:             role=AgentRole.GENERALIST,"
    }
  ]
}