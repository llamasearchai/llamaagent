name: Comprehensive CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run nightly builds
    - cron: '0 2 * * *'

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  lint-and-format:
    name: Code Quality & Formatting
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt || echo "No dev requirements file"
        pip install black isort flake8 mypy bandit safety pylint

    - name: Run Black formatting check
      run: black --check --diff src/ tests/

    - name: Run isort import sorting check
      run: isort --check-only --diff src/ tests/

    - name: Run flake8 linting
      run: flake8 src/ tests/ --max-line-length=100 --extend-ignore=E203,W503

    - name: Run MyPy type checking
      run: mypy src/ --ignore-missing-imports --no-strict-optional
      continue-on-error: true

    - name: Run Bandit security analysis
      run: bandit -r src/ -f json -o bandit-report.json
      continue-on-error: true

    - name: Run Safety dependency check
      run: safety check --json --output safety-report.json
      continue-on-error: true

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  test-matrix:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.9', '3.10', '3.11', '3.12']
        exclude:
          # Reduce matrix size for faster builds
          - os: macos-latest
            python-version: '3.9'
          - os: windows-latest
            python-version: '3.10'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-${{ matrix.python-version }}-pip-${{ hashFiles('**/requirements*.txt') }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio pytest-mock coverage

    - name: Install package
      run: pip install -e .

    - name: Run basic tests
      run: |
        pytest tests/ -v --tb=short --cov=src --cov-report=xml --cov-report=html
      env:
        PYTHONPATH: ${{ github.workspace }}/src

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [lint-and-format]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpass
          POSTGRES_USER: testuser
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-integration

    - name: Install package
      run: pip install -e .

    - name: Wait for services
      run: |
        sleep 10
        pg_isready -h localhost -p 5432 -U testuser
        redis-cli -h localhost -p 6379 ping

    - name: Run integration tests
      run: |
        pytest tests/test_*integration*.py -v --tb=short
      env:
        DATABASE_URL: postgresql://testuser:testpass@localhost:5432/testdb
        REDIS_URL: redis://localhost:6379/0
        PYTHONPATH: ${{ github.workspace }}/src

  performance-tests:
    name: Performance & Load Testing
    runs-on: ubuntu-latest
    needs: [test-matrix]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-benchmark locust

    - name: Install package
      run: pip install -e .

    - name: Run performance benchmarks
      run: |
        pytest tests/test_*performance*.py -v --benchmark-only --benchmark-json=benchmark.json
      continue-on-error: true

    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-results
        path: benchmark.json

  docker-build:
    name: Docker Build & Security Scan
    runs-on: ubuntu-latest
    needs: [lint-and-format]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: llamaagent/shell-gpt
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.production
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: llamaagent/shell-gpt:latest
        format: 'sarif'
        output: 'trivy-results.sarif'
      continue-on-error: true

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  api-tests:
    name: API & Endpoint Testing
    runs-on: ubuntu-latest
    needs: [docker-build]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install httpx pytest-httpx fastapi[all] uvicorn

    - name: Install package
      run: pip install -e .

    - name: Start FastAPI server
      run: |
        cd src
        python -m uvicorn llamaagent.api.main:app --host 0.0.0.0 --port 8000 &
        sleep 10
        curl -f http://localhost:8000/health || exit 1
      env:
        PYTHONPATH: ${{ github.workspace }}/src

    - name: Run API tests
      run: |
        pytest tests/test_*api*.py -v --tb=short
      env:
        API_BASE_URL: http://localhost:8000
        PYTHONPATH: ${{ github.workspace }}/src

    - name: Test shell endpoints
      run: |
        curl -X POST "http://localhost:8000/shell/command/generate" \
          -H "Content-Type: application/json" \
          -d '{"prompt": "list files", "safety_check": true}' | jq

        curl -X GET "http://localhost:8000/shell/health" | jq

        curl -X GET "http://localhost:8000/shell/info" | jq

  e2e-tests:
    name: End-to-End Testing
    runs-on: ubuntu-latest
    needs: [api-tests]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install playwright pytest-playwright

    - name: Install Playwright browsers
      run: playwright install

    - name: Install package
      run: pip install -e .

    - name: Run E2E tests
      run: |
        pytest tests/test_*e2e*.py -v --tb=short
      env:
        PYTHONPATH: ${{ github.workspace }}/src

  security-scan:
    name: Advanced Security Scanning
    runs-on: ubuntu-latest
    needs: [lint-and-format]

    steps:
    - uses: actions/checkout@v4

    - name: Run CodeQL Analysis
      uses: github/codeql-action/init@v2
      with:
        languages: python

    - name: Autobuild
      uses: github/codeql-action/autobuild@v2

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2

    - name: Run Semgrep security scan
      uses: returntocorp/semgrep-action@v1
      with:
        publishToken: ${{ secrets.SEMGREP_APP_TOKEN }}
      continue-on-error: true

  documentation:
    name: Documentation Build & Deploy
    runs-on: ubuntu-latest
    needs: [test-matrix]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install sphinx sphinx-rtd-theme sphinxcontrib-napoleon mkdocs mkdocs-material

    - name: Build Sphinx documentation
      run: |
        cd docs
        make html
      continue-on-error: true

    - name: Build MkDocs documentation
      run: |
        mkdocs build
      continue-on-error: true

    - name: Deploy to GitHub Pages
      if: github.ref == 'refs/heads/main'
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./site

  release:
    name: Release & Deployment
    runs-on: ubuntu-latest
    needs: [test-matrix, integration-tests, docker-build, api-tests, e2e-tests, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine bump2version

    - name: Configure Git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"

    - name: Bump version and create tag
      run: |
        bump2version patch --tag --commit
        git push origin --tags
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Build Python package
      run: |
        python -m build

    - name: Publish to PyPI
      if: success()
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.ref_name }}
        generate_release_notes: true
        files: |
          dist/*.whl
          dist/*.tar.gz
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  cleanup:
    name: Cleanup & Notifications
    runs-on: ubuntu-latest
    needs: [release]
    if: always()

    steps:
    - name: Clean up artifacts
      run: |
        echo "Cleaning up temporary artifacts..."

    - name: Notify on success
      if: success()
      run: |
        echo "All tests passed and deployment successful!"

    - name: Notify on failure
      if: failure()
      run: |
        echo "❌ Build failed. Check the logs for details."
        exit 1
