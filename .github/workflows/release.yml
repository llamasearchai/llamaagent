name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      publish_to_pypi:
        description: 'Publish to PyPI'
        required: false
        default: true
        type: boolean

permissions:
  contents: write
  packages: write
  id-token: write

jobs:
  build:
    name: Build Package
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
        
    - name: Install build tools
      run: |
        python -m pip install --upgrade pip
        pip install build twine
        
    - name: Build package
      run: |
        python -m build
        
    - name: Check package
      run: |
        python -m twine check dist/*
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: python-package-distributions
        path: dist/
        
  github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/
        
    - name: Extract version from tag
      id: version
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
        
    - name: Generate release notes
      id: release_notes
      run: |
        echo "RELEASE_NOTES<<EOF" >> $GITHUB_OUTPUT
        echo "## LlamaAgent v${{ steps.version.outputs.VERSION }}" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "**Author:** Nik Jois <nikjois@llamasearch.ai>" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "### Changes in this release:" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        # Get commits since last tag
        if [ $(git tag --list | wc -l) -gt 1 ]; then
          LAST_TAG=$(git tag --sort=-version:refname | head -n 2 | tail -n 1)
          echo "Changes since $LAST_TAG:" >> $GITHUB_OUTPUT
          git log --oneline --no-merges ${LAST_TAG}..HEAD | sed 's/^/- /' >> $GITHUB_OUTPUT
        else
          echo "- Initial release" >> $GITHUB_OUTPUT
        fi
        echo "" >> $GITHUB_OUTPUT
        echo "### Installation:" >> $GITHUB_OUTPUT
        echo "\`\`\`bash" >> $GITHUB_OUTPUT
        echo "pip install llamaagent==${{ steps.version.outputs.VERSION }}" >> $GITHUB_OUTPUT
        echo "\`\`\`" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ github.ref_name }}
        name: LlamaAgent v${{ steps.version.outputs.VERSION }}
        body: ${{ steps.release_notes.outputs.RELEASE_NOTES }}
        files: |
          dist/*.whl
          dist/*.tar.gz
        draft: false
        prerelease: ${{ contains(github.ref, 'rc') || contains(github.ref, 'beta') || contains(github.ref, 'alpha') }}
        generate_release_notes: true
        
  pypi-publish:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [build, github-release]
    if: startsWith(github.ref, 'refs/tags/v') && !contains(github.ref, 'rc') && !contains(github.ref, 'beta') && !contains(github.ref, 'alpha') && (github.event_name != 'workflow_dispatch' || github.event.inputs.publish_to_pypi == 'true')
    
    environment:
      name: pypi
      url: https://pypi.org/p/llamaagent
      
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/
        
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}
        verbose: true 