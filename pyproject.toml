[build-system]
requires = ["setuptools>=45", "wheel", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "llamaagent"
version = "1.0.0"
description = "Advanced Multi-Agent AI Framework with SPRE (Strategic Planning & Resourceful Execution)"
authors = [
    {name = "Nik Jois", email = "nikjois@llamasearch.ai"}
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.9"
keywords = ["ai", "agents", "llm", "multi-agent", "planning", "tools", "automation"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

dependencies = [
    "typer[all]>=0.9.0",
    "click>=8.0.0",
    "nest-asyncio>=1.5.0",
    "rich>=13.7.0",
    "pydantic>=2.5.0",
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "httpx>=0.25.0",
    "aiohttp>=3.9.0",
    "aiofiles>=23.2.0",
    "asyncio-mqtt>=0.13.0",
    "numpy>=1.24.0",
    "pandas>=2.1.0",
    "scipy>=1.11.0",
    "scikit-learn>=1.3.0",
    "matplotlib>=3.7.0",
    "seaborn>=0.13.0",
    "plotly>=5.17.0",
    "tiktoken>=0.5.0",
    "openai>=1.3.0",
    "anthropic>=0.7.0",
    "tenacity>=8.2.0",
    "structlog>=23.2.0",
    "loguru>=0.7.0",
    "python-dotenv>=1.0.0",
    "pyyaml>=6.0",
    "jinja2>=3.1.0",
    "python-multipart>=0.0.6",
    "tqdm>=4.66.0",
    "psutil>=5.9.0",
    "uvloop>=0.19.0;platform_system!='Windows'",
    "asyncpg>=0.29.0",
    "langgraph>=0.0.16",
    "datasets>=2.14.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "pytest-benchmark>=4.0.0",
    "pytest-xdist>=3.5.0",
    "ruff>=0.1.6",
    "mypy>=1.7.0",
    "black>=23.11.0",
    "pre-commit>=3.5.0",
    "nox>=2023.4.22",
    "bandit>=1.7.5",
    "safety>=2.3.0",
    "types-requests>=2.31.0",
    "types-python-dateutil>=2.8.19",
    "types-pyyaml>=6.0.12",
    "types-tqdm>=4.66.0",
]
prod = [
    "gunicorn>=21.2.0",
    "prometheus-client>=0.19.0",
    "sentry-sdk>=1.38.0",
]
ml = [
    "torch>=2.1.0",
    "transformers>=4.36.0",
    "sentence-transformers>=2.2.2",
    "faiss-cpu>=1.7.4",
    "huggingface-hub>=0.19.0",
]

[project.scripts]
llamaagent = "llamaagent.cli:main"
llamaagent-interactive = "llamaagent.cli.interactive:run_interactive_experiment"

[project.urls]
"Homepage" = "https://github.com/nikjois/llamaagent"
"Bug Reports" = "https://github.com/nikjois/llamaagent/issues"
"Source" = "https://github.com/nikjois/llamaagent"

[tool.hatch.version]
source = "vcs"

[tool.hatch.build.hooks.vcs]
version-file = "src/llamaagent/_version.py"

[tool.ruff]
line-length = 120
target-version = "py311"

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "RUF", # Ruff-specific rules
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults (FastAPI Depends pattern)
    "C901",  # too complex
    "E402",  # module level import not at top of file (after docstrings is acceptable)
    "RUF012", # Mutable class attributes should be annotated with `typing.ClassVar`
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["S101", "D"]
"src/llamaagent/api.py" = ["B008"]  # FastAPI Depends usage is standard pattern
"src/llamaagent/benchmarks/*.py" = ["E402"]  # Module imports after docstrings
"src/llamaagent/integration/*.py" = ["E402"]  # Optional imports after try/except
"src/llamaagent/storage/*.py" = ["E402"]  # Optional imports after try/except

[tool.ruff.lint.isort]
known-first-party = ["llamaagent"]

[tool.black]
line-length = 120
target-version = ['py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'

[tool.mypy]
python_version = "3.11"
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_return_any = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

[tool.pytest.ini_options]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=src/llamaagent",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=100",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["src"]
parallel = true
branch = true
omit = [
    "src/llamaagent/llm/*",
    "src/llamaagent/agents/react.py",
    "src/llamaagent/agents/base.py",
    "src/llamaagent/memory/__init__.py",
    "src/llamaagent/__init__.py",
    "src/llamaagent/storage/**",
    "src/llamaagent/integration/**",
    "src/llamaagent/benchmarks/**",
    "src/llamaagent/data_generation/**",
    "src/llamaagent/evolution/**",
    "src/llamaagent/visualization.py",
    "src/llamaagent/statistical_analysis.py",
    "src/llamaagent/report_generator.py",
    "src/llamaagent/experiment_runner.py",
    "examples/**",
    "tools-txts/**",
]

[tool.coverage.paths]
llamaagent = ["src/llamaagent", "*/site-packages/llamaagent"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.flake8]
max-line-length = 240
extend-ignore = "E203,W503,E501" 