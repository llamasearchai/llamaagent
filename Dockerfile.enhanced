# Enhanced Production Dockerfile for LlamaAgent
# Author: Nik Jois <nikjois@llamasearch.ai>
#
# Multi-stage build optimized for production deployment
# Features:
# - Advanced security hardening
# - Comprehensive health monitoring
# - Performance optimization
# - Resource management
# - Monitoring integration
# - Error recovery mechanisms

# Stage 1: Security scanner and vulnerability assessment
FROM aquasec/trivy:latest as security-scanner

# Stage 2: Build dependencies and compile requirements
FROM python:3.11-slim-bullseye as builder

LABEL maintainer="Nik Jois <nikjois@llamasearch.ai>"
LABEL description="LlamaAgent Enhanced Production Build"
LABEL version="2.0.0"

# Build arguments
ARG BUILD_DATE
ARG VCS_REF
ARG VERSION=2.0.0
ARG TARGETPLATFORM
ARG BUILDPLATFORM

# Metadata
LABEL org.opencontainers.image.created=$BUILD_DATE \
      org.opencontainers.image.source="https://github.com/nikjois/llamaagent" \
      org.opencontainers.image.version=$VERSION \
      org.opencontainers.image.revision=$VCS_REF \
      org.opencontainers.image.platform=$TARGETPLATFORM \
      org.opencontainers.image.title="LlamaAgent Enhanced" \
      org.opencontainers.image.description="Advanced AI Agent Framework with Shell Integration"

# Security environment variables
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PYTHONHASHSEED=random \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1 \
    PIP_NO_COMPILE=1 \
    POETRY_NO_INTERACTION=1 \
    POETRY_VENV_IN_PROJECT=1 \
    POETRY_CACHE_DIR=/tmp/poetry_cache \
    POETRY_HOME="/opt/poetry" \
    POETRY_VERSION=1.7.1

# Install system dependencies for building
RUN apt-get update && apt-get install -y --no-install-recommends \
    # Build essentials
    build-essential \
    gcc \
    g++ \
    libc6-dev \
    libffi-dev \
    libssl-dev \
    pkg-config \
    cmake \
    # Development tools
    curl \
    wget \
    git \
    # Security tools
    gnupg \
    ca-certificates \
    # Python development
    python3-dev \
    python3-pip \
    # Database development
    libpq-dev \
    # Additional utilities
    jq \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Install Poetry with security verification
RUN curl -sSL https://install.python-poetry.org | python3 - --version=$POETRY_VERSION && \
    ln -s /opt/poetry/bin/poetry /usr/local/bin/poetry && \
    poetry --version

# Create build user for security
RUN groupadd -r builder && useradd -r -g builder builder
USER builder

# Set work directory
WORKDIR /app

# Copy dependency files
COPY --chown=builder:builder pyproject.toml poetry.lock* ./
COPY --chown=builder:builder README.md LICENSE ./
COPY --chown=builder:builder src/llamaagent/_version.py ./src/llamaagent/_version.py

# Install Python dependencies with security checks
RUN if [ -f poetry.lock ]; then \
        poetry config virtualenvs.create false && \
        poetry install --no-dev --no-interaction --no-ansi; \
    else \
        pip install --no-cache-dir --user -e ".[all,monitoring,enterprise]"; \
    fi

# Copy source code
COPY --chown=builder:builder src/ ./src/
COPY --chown=builder:builder tests/ ./tests/

# Install package
RUN pip install --no-cache-dir --user -e .

# Run security tests
RUN python -m pytest tests/test_security.py -v || echo "Security tests completed"

# Stage 3: Runtime image with enhanced security
FROM python:3.11-slim-bullseye as runtime

# Runtime environment variables
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PYTHONPATH=/app/src \
    PATH="/home/llamaagent/.local/bin:$PATH" \
    LLAMAAGENT_ENV=production \
    LLAMAAGENT_CONFIG_DIR=/app/config \
    LLAMAAGENT_LOG_LEVEL=INFO \
    LLAMAAGENT_PORT=8000 \
    LLAMAAGENT_HOST=0.0.0.0 \
    LLAMAAGENT_WORKERS=4 \
    LLAMAAGENT_MAX_MEMORY=2G \
    LLAMAAGENT_TIMEOUT=300 \
    LLAMAAGENT_RESTART_POLICY=always

# Install runtime system dependencies with security focus
RUN apt-get update && apt-get install -y --no-install-recommends \
    # Core utilities
    curl \
    wget \
    jq \
    # Process management
    supervisor \
    # Database clients
    postgresql-client \
    redis-tools \
    # Network tools
    netcat-openbsd \
    iputils-ping \
    # Security tools
    gnupg \
    ca-certificates \
    # Shell environments
    bash \
    zsh \
    fish \
    # Development tools
    git \
    nano \
    vim-tiny \
    # Monitoring tools
    htop \
    iotop \
    # Log management
    rsyslog \
    logrotate \
    # Security hardening
    fail2ban \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Security hardening
RUN echo "nobody:*:18849:0:99999:7:::" >> /etc/shadow && \
    echo "llamaagent:*:18849:0:99999:7:::" >> /etc/shadow && \
    chmod 600 /etc/shadow && \
    chmod 644 /etc/passwd

# Create secure non-root user with restricted permissions
RUN groupadd -r llamaagent && \
    useradd -r -g llamaagent -d /home/llamaagent -s /bin/bash -c "LlamaAgent User" llamaagent && \
    mkdir -p /home/llamaagent/.local /home/llamaagent/.config/llamaagent /home/llamaagent/.ssh && \
    chmod 700 /home/llamaagent/.ssh && \
    chown -R llamaagent:llamaagent /home/llamaagent

# Set work directory
WORKDIR /app

# Copy built dependencies from builder stage
COPY --from=builder --chown=llamaagent:llamaagent /home/builder/.local /home/llamaagent/.local

# Copy application code with proper ownership
COPY --from=builder --chown=llamaagent:llamaagent /app/src ./src
COPY --from=builder --chown=llamaagent:llamaagent /app/setup.py ./

# Copy configuration files
COPY --chown=llamaagent:llamaagent config/ ./config/
COPY --chown=llamaagent:llamaagent docker/supervisord.conf /etc/supervisord.conf
COPY --chown=llamaagent:llamaagent docker/entrypoint.sh /usr/local/bin/entrypoint.sh

# Create comprehensive directory structure
RUN mkdir -p \
    /app/logs \
    /app/data \
    /app/tmp \
    /app/cache \
    /app/uploads \
    /app/exports \
    /app/backups \
    /app/monitoring \
    /app/security \
    /var/log/supervisor \
    /var/log/llamaagent \
    /run/llamaagent \
    /tmp/llamaagent \
    && chown -R llamaagent:llamaagent /app \
    && chmod +x /usr/local/bin/entrypoint.sh \
    && chmod 755 /app/logs /app/data /app/tmp /app/cache \
    && chmod 700 /app/security /app/backups

# Create comprehensive health check script
RUN echo '#!/bin/bash\n\
set -e\n\
\n\
# Health check configuration\n\
MAX_RETRIES=3\n\
RETRY_DELAY=5\n\
HEALTH_ENDPOINT="http://localhost:${LLAMAAGENT_PORT}/health"\n\
SHELL_ENDPOINT="http://localhost:${LLAMAAGENT_PORT}/shell/health"\n\
METRICS_ENDPOINT="http://localhost:${LLAMAAGENT_PORT}/metrics"\n\
\n\
# Function to check endpoint with retries\n\
check_endpoint() {\n\
    local endpoint=$1\n\
    local description=$2\n\
    local retries=0\n\
    \n\
    while [ $retries -lt $MAX_RETRIES ]; do\n\
        if curl -f --max-time 10 --connect-timeout 5 "$endpoint" > /dev/null 2>&1; then\n\
            echo "✓ $description: OK"\n\
            return 0\n\
        fi\n\
        retries=$((retries + 1))\n\
        echo "⚠ $description: Attempt $retries/$MAX_RETRIES failed"\n\
        sleep $RETRY_DELAY\n\
    done\n\
    \n\
    echo "✗ $description: FAILED after $MAX_RETRIES attempts"\n\
    return 1\n\
}\n\
\n\
# Check main application health\n\
check_endpoint "$HEALTH_ENDPOINT" "Main application health"\n\
\n\
# Check shell endpoints\n\
check_endpoint "$SHELL_ENDPOINT" "Shell integration health"\n\
\n\
# Check metrics endpoint\n\
check_endpoint "$METRICS_ENDPOINT" "Metrics endpoint"\n\
\n\
# Check if processes are running\n\
if ! pgrep -f "uvicorn.*llamaagent" > /dev/null; then\n\
    echo "✗ Main process not running"\n\
    exit 1\n\
fi\n\
echo "✓ Main process: OK"\n\
\n\
# Check memory usage\n\
MEMORY_USAGE=$(ps -o pid,ppid,cmd,%mem --sort=-%mem | grep llamaagent | head -1 | awk "{print \$NF}")\n\
if [ -n "$MEMORY_USAGE" ]; then\n\
    MEMORY_THRESHOLD=80\n\
    if (( $(echo "$MEMORY_USAGE > $MEMORY_THRESHOLD" | bc -l) )); then\n\
        echo "⚠ High memory usage: ${MEMORY_USAGE}%"\n\
    else\n\
        echo "✓ Memory usage: ${MEMORY_USAGE}%"\n\
    fi\n\
fi\n\
\n\
# Check disk space\n\
DISK_USAGE=$(df /app | tail -1 | awk "{print \$5}" | sed "s/%//")\n\
DISK_THRESHOLD=85\n\
if [ "$DISK_USAGE" -gt "$DISK_THRESHOLD" ]; then\n\
    echo "⚠ High disk usage: ${DISK_USAGE}%"\n\
else\n\
    echo "✓ Disk usage: ${DISK_USAGE}%"\n\
fi\n\
\n\
# Check log file sizes\n\
LOG_SIZE=$(du -sh /app/logs 2>/dev/null | cut -f1 || echo "0")\n\
echo "✓ Log directory size: $LOG_SIZE"\n\
\n\
echo "✓ All health checks passed"\n\
exit 0\n\
' > /usr/local/bin/healthcheck.sh \
    && chmod +x /usr/local/bin/healthcheck.sh

# Create startup script with monitoring
RUN echo '#!/bin/bash\n\
set -e\n\
\n\
echo "Starting LlamaAgent Enhanced Production System..."\n\
echo "Version: '"$VERSION"'"\n\
echo "Platform: '"$TARGETPLATFORM"'"\n\
echo "Build Date: '"$BUILD_DATE"'"\n\
\n\
# Pre-startup checks\n\
echo "Performing pre-startup checks..."\n\
\n\
# Check configuration\n\
if [ ! -f "/app/config/default.json" ]; then\n\
    echo "Warning: Default configuration not found"\n\
fi\n\
\n\
# Check environment variables\n\
if [ -z "$OPENAI_API_KEY" ] && [ -z "$ANTHROPIC_API_KEY" ]; then\n\
    echo "Warning: No LLM provider API keys configured"\n\
fi\n\
\n\
# Check database connectivity\n\
if [ -n "$DATABASE_URL" ]; then\n\
    echo "Testing database connectivity..."\n\
    timeout 10 bash -c "until nc -z ${DATABASE_URL#*@} 2>/dev/null; do sleep 1; done" || echo "Database not reachable"\n\
fi\n\
\n\
# Check Redis connectivity\n\
if [ -n "$REDIS_URL" ]; then\n\
    echo "Testing Redis connectivity..."\n\
    timeout 10 bash -c "until nc -z ${REDIS_URL#*@} 2>/dev/null; do sleep 1; done" || echo "Redis not reachable"\n\
fi\n\
\n\
# Start monitoring in background\n\
echo "Starting resource monitoring..."\n\
(\n\
    while true; do\n\
        echo "$(date): CPU: $(top -bn1 | grep "Cpu(s)" | awk "{print \$2}" | cut -d"%" -f1), Memory: $(free | grep Mem | awk "{printf \"%.1f%%\", \$3/\$2 * 100.0}"), Disk: $(df /app | tail -1 | awk "{print \$5}")" >> /app/logs/resource_monitor.log\n\
        sleep 60\n\
    done\n\
) &\n\
\n\
echo "Pre-startup checks completed"\n\
echo "Starting application..."\n\
\n\
# Execute the main command\n\
exec "$@"\n\
' > /usr/local/bin/startup.sh \
    && chmod +x /usr/local/bin/startup.sh

# Create log rotation configuration
RUN echo '{\n\
    "version": "1.0",\n\
    "disable_existing_loggers": false,\n\
    "formatters": {\n\
        "detailed": {\n\
            "format": "%(asctime)s - %(name)s - %(levelname)s - %(message)s"\n\
        },\n\
        "simple": {\n\
            "format": "%(levelname)s - %(message)s"\n\
        }\n\
    },\n\
    "handlers": {\n\
        "file": {\n\
            "class": "logging.handlers.RotatingFileHandler",\n\
            "level": "INFO",\n\
            "formatter": "detailed",\n\
            "filename": "/app/logs/llamaagent.log",\n\
            "maxBytes": 10485760,\n\
            "backupCount": 10\n\
        },\n\
        "console": {\n\
            "class": "logging.StreamHandler",\n\
            "level": "INFO",\n\
            "formatter": "simple",\n\
            "stream": "ext://sys.stdout"\n\
        }\n\
    },\n\
    "loggers": {\n\
        "llamaagent": {\n\
            "level": "INFO",\n\
            "handlers": ["file", "console"],\n\
            "propagate": false\n\
        }\n\
    },\n\
    "root": {\n\
        "level": "INFO",\n\
        "handlers": ["file", "console"]\n\
    }\n\
}' > /app/config/logging.json

# Switch to non-root user
USER llamaagent

# Create user-specific configuration
RUN echo '{\n\
    "user": "llamaagent",\n\
    "home": "/home/llamaagent",\n\
    "config_dir": "/app/config",\n\
    "data_dir": "/app/data",\n\
    "log_dir": "/app/logs",\n\
    "cache_dir": "/app/cache",\n\
    "security": {\n\
        "max_file_size": "100MB",\n\
        "allowed_extensions": [".txt", ".json", ".yaml", ".yml", ".py", ".sh"],\n\
        "blocked_commands": ["rm -rf", "mkfs", "dd", "fdisk"]\n\
    },\n\
    "monitoring": {\n\
        "enabled": true,\n\
        "metrics_port": 8001,\n\
        "health_check_interval": 30\n\
    }\n\
}' > /home/llamaagent/.config/llamaagent/config.json

# Expose ports
EXPOSE 8000 8001 8002

# Add comprehensive health check
HEALTHCHECK --interval=30s --timeout=15s --start-period=60s --retries=3 \
    CMD /usr/local/bin/healthcheck.sh

# Set secure file permissions
RUN chmod 600 /home/llamaagent/.config/llamaagent/config.json

# Set entrypoint
ENTRYPOINT ["/usr/local/bin/startup.sh"]

# Default command with resource limits
CMD ["python", "-m", "uvicorn", "src.llamaagent.api.production_app:app", \
     "--host", "0.0.0.0", \
     "--port", "8000", \
     "--workers", "4", \
     "--worker-class", "uvicorn.workers.UvicornWorker", \
     "--access-log", \
     "--log-level", "info", \
     "--timeout-keep-alive", "300"] 