# =============================================================================
# LlamaAgent Complete Production Docker Compose
#
# Complete production environment with:
# - LlamaAgent API service
# - PostgreSQL database
# - Redis cache/message broker
# - Nginx reverse proxy
# - Prometheus monitoring
# - Grafana dashboards
# - Vector database (Qdrant)
# - Backup services
# - Log management
#
# Author: Nik Jois <nikjois@llamasearch.ai>
# =============================================================================

version: '3.8'

networks:
  llamaagent-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  qdrant_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  nginx_logs:
    driver: local
  app_logs:
    driver: local
  app_data:
    driver: local
  app_cache:
    driver: local
  app_checkpoints:
    driver: local
  backup_data:
    driver: local

services:
  # =============================================================================
  # Core Application Services
  # =============================================================================

  llamaagent-api:
    build:
      context: .
      dockerfile: Dockerfile.complete
      target: production
    image: llamaagent:complete
    container_name: llamaagent-api
    restart: unless-stopped
    environment:
      - LLAMAAGENT_ENV=production
      - DATABASE_URL=postgresql://llamaagent:${POSTGRES_PASSWORD:-llamaagent123}@postgres:5432/llamaagent
      - REDIS_URL=redis://redis:6379/0
      - QDRANT_URL=http://qdrant:6333
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY:-}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - WORKERS=${WORKERS:-4}
      - MAX_REQUESTS=${MAX_REQUESTS:-1000}
      - TIMEOUT=${TIMEOUT:-300}
    volumes:
      - app_data:/app/data
      - app_logs:/app/logs
      - app_cache:/app/cache
      - app_checkpoints:/app/checkpoints
      - ./config:/app/config:ro
    ports:
      - "8000:8000"
    depends_on:
      - postgres
      - redis
      - qdrant
    networks:
      - llamaagent-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'

  # =============================================================================
  # Database Services
  # =============================================================================

  postgres:
    image: postgres:15-alpine
    container_name: llamaagent-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=llamaagent
      - POSTGRES_USER=llamaagent
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-llamaagent123}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "5432:5432"
    networks:
      - llamaagent-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U llamaagent -d llamaagent"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'

  redis:
    image: redis:7-alpine
    container_name: llamaagent-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-llamaagent123}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - llamaagent-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  qdrant:
    image: qdrant/qdrant:latest
    container_name: llamaagent-qdrant
    restart: unless-stopped
    volumes:
      - qdrant_data:/qdrant/storage
    ports:
      - "6333:6333"
      - "6334:6334"
    networks:
      - llamaagent-network
    environment:
      - QDRANT__SERVICE__HTTP_PORT=6333
      - QDRANT__SERVICE__GRPC_PORT=6334
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'

  # =============================================================================
  # Web Server & Reverse Proxy
  # =============================================================================

  nginx:
    image: nginx:alpine
    container_name: llamaagent-nginx
    restart: unless-stopped
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - llamaagent-api
    networks:
      - llamaagent-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  # =============================================================================
  # Monitoring & Observability
  # =============================================================================

  prometheus:
    image: prom/prometheus:latest
    container_name: llamaagent-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./prometheus/alerts:/etc/prometheus/alerts:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - llamaagent-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  grafana:
    image: grafana/grafana:latest
    container_name: llamaagent-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_ROOT_URL=http://localhost:3000
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks:
      - llamaagent-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  # =============================================================================
  # Backup & Maintenance Services
  # =============================================================================

  backup:
    image: postgres:15-alpine
    container_name: llamaagent-backup
    restart: "no"
    environment:
      - PGPASSWORD=${POSTGRES_PASSWORD:-llamaagent123}
    volumes:
      - backup_data:/backup
      - ./scripts/backup.sh:/backup.sh:ro
    command: ["sh", "-c", "while true; do sleep 86400; /backup.sh; done"]
    depends_on:
      - postgres
    networks:
      - llamaagent-network
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.1'

  # =============================================================================
  # Development & Testing Services (Optional)
  # =============================================================================

  jupyter:
    image: jupyter/scipy-notebook:latest
    container_name: llamaagent-jupyter
    restart: unless-stopped
    environment:
      - JUPYTER_ENABLE_LAB=yes
      - JUPYTER_TOKEN=${JUPYTER_TOKEN:-llamaagent123}
    volumes:
      - ./notebooks:/home/jovyan/work
      - app_data:/home/jovyan/work/data:ro
    ports:
      - "8888:8888"
    networks:
      - llamaagent-network
    profiles:
      - development
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'

  # =============================================================================
  # Log Management
  # =============================================================================

  loki:
    image: grafana/loki:latest
    container_name: llamaagent-loki
    restart: unless-stopped
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - ./loki/loki-config.yml:/etc/loki/local-config.yaml:ro
    ports:
      - "3100:3100"
    networks:
      - llamaagent-network
    profiles:
      - monitoring
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  promtail:
    image: grafana/promtail:latest
    container_name: llamaagent-promtail
    restart: unless-stopped
    volumes:
      - ./promtail/promtail-config.yml:/etc/promtail/config.yml:ro
      - app_logs:/var/log/app:ro
      - nginx_logs:/var/log/nginx:ro
    command: -config.file=/etc/promtail/config.yml
    depends_on:
      - loki
    networks:
      - llamaagent-network
    profiles:
      - monitoring
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.1'

  # =============================================================================
  # Additional Services
  # =============================================================================

  adminer:
    image: adminer:latest
    container_name: llamaagent-adminer
    restart: unless-stopped
    ports:
      - "8080:8080"
    depends_on:
      - postgres
    networks:
      - llamaagent-network
    profiles:
      - development
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.1'

  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: llamaagent-redis-commander
    restart: unless-stopped
    environment:
      - REDIS_HOSTS=local:redis:6379:0:${REDIS_PASSWORD:-llamaagent123}
    ports:
      - "8081:8081"
    depends_on:
      - redis
    networks:
      - llamaagent-network
    profiles:
      - development
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.1'
