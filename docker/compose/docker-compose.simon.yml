version: '3.8'

# Simon Willison's LLM Ecosystem - Complete Docker Compose
# Full-featured deployment with all services
# Author: Nik Jois <nikjois@llamasearch.ai>

services:
  # Main LLM Ecosystem API
  simon-ecosystem:
    build:
      context: .
      dockerfile: Dockerfile.simon
      target: development
    container_name: simon-llm-ecosystem
    ports:
      - "8000:8000"  # API server
      - "8001:8001"  # Datasette server
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - MISTRAL_API_KEY=${MISTRAL_API_KEY}
      - GROQ_API_KEY=${GROQ_API_KEY}
      - LLM_DATABASE_PATH=/app/data/simon_ecosystem.db
      - ENABLE_COMMAND_TOOL=false  # Security: disabled by default
      - LOG_LEVEL=INFO
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./exports:/app/exports
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    networks:
      - simon-network

  # Datasette for data exploration
  datasette:
    image: datasetteproject/datasette:latest
    container_name: simon-datasette
    ports:
      - "8002:8001"
    volumes:
      - ./data:/app/data:ro
    command: >
      datasette /app/data/simon_ecosystem.db
      --host 0.0.0.0
      --port 8001
      --setting sql_time_limit_ms 10000
      --setting default_page_size 50
      --setting max_returned_rows 1000
    depends_on:
      - simon-ecosystem
    networks:
      - simon-network

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: simon-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3
    restart: unless-stopped
    networks:
      - simon-network

  # PostgreSQL for advanced analytics (optional)
  postgres:
    image: postgres:15-alpine
    container_name: simon-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=simon_ecosystem
      - POSTGRES_USER=simon
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-simon123}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U simon -d simon_ecosystem"]
      interval: 30s
      timeout: 5s
      retries: 3
    restart: unless-stopped
    networks:
      - simon-network

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: simon-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - simon-ecosystem
      - datasette
    restart: unless-stopped
    networks:
      - simon-network

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: simon-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - simon-network

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: simon-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - simon-network

  # Ollama for local models (optional)
  ollama:
    image: ollama/ollama:latest
    container_name: simon-ollama
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    environment:
      - OLLAMA_HOST=0.0.0.0
    restart: unless-stopped
    networks:
      - simon-network

  # Jupyter for notebooks and experimentation
  jupyter:
    build:
      context: .
      dockerfile: Dockerfile.simon
      target: development
    container_name: simon-jupyter
    ports:
      - "8888:8888"
    environment:
      - JUPYTER_ENABLE_LAB=yes
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
    volumes:
      - ./notebooks:/app/notebooks
      - ./data:/app/data
    command: >
      jupyter lab
      --ip=0.0.0.0
      --port=8888
      --no-browser
      --allow-root
      --NotebookApp.token=''
      --NotebookApp.password=''
    depends_on:
      - simon-ecosystem
    restart: unless-stopped
    networks:
      - simon-network

networks:
  simon-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  redis_data:
    driver: local
  postgres_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  ollama_data:
    driver: local

# Additional services for production
x-production-services:
  # Load balancer
  haproxy:
    image: haproxy:alpine
    container_name: simon-haproxy
    ports:
      - "80:80"
      - "443:443"
      - "8404:8404"  # Stats
    volumes:
      - ./haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro
    depends_on:
      - simon-ecosystem
    restart: unless-stopped
    networks:
      - simon-network

  # Backup service
  backup:
    image: alpine:latest
    container_name: simon-backup
    volumes:
      - ./data:/app/data:ro
      - ./backups:/app/backups
    command: >
      sh -c "
      while true; do
        tar -czf /app/backups/backup-$(date +%Y%m%d_%H%M%S).tar.gz /app/data;
        find /app/backups -name '*.tar.gz' -mtime +7 -delete;
        sleep 86400;
      done"
    restart: unless-stopped
    networks:
      - simon-network
