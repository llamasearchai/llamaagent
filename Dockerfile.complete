# =============================================================================
# LlamaAgent Complete Production Dockerfile
# 
# Multi-stage production-ready Docker image with:
# - Security hardening
# - Optimized layers
# - Complete dependency management
# - Health checks
# - Non-root user
# - Volume mounts for persistence
#
# Author: Nik Jois <nikjois@llamasearch.ai>
# =============================================================================

# Build stage
FROM python:3.11-slim as builder

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1

# Install system dependencies for building
RUN apt-get update && apt-get install -y \
    build-essential \
    curl \
    git \
    && rm -rf /var/lib/apt/lists/*

# Create virtual environment
RUN python -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Copy requirements
COPY requirements.txt pyproject.toml setup.py ./
COPY src/ ./src/

# Install Python dependencies
RUN pip install --upgrade pip wheel setuptools && \
    pip install -r requirements.txt && \
    pip install -e .

# Production stage
FROM python:3.11-slim as production

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PATH="/opt/venv/bin:$PATH" \
    LLAMAAGENT_ENV=production \
    LLAMAAGENT_CONFIG_PATH=/app/config \
    LLAMAAGENT_DATA_PATH=/app/data \
    LLAMAAGENT_LOGS_PATH=/app/logs

# Install runtime dependencies
RUN apt-get update && apt-get install -y \
    curl \
    jq \
    sqlite3 \
    redis-tools \
    postgresql-client \
    nginx \
    supervisor \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Create non-root user
RUN groupadd -r llamaagent && \
    useradd -r -g llamaagent -d /app -s /bin/bash -c "LlamaAgent User" llamaagent

# Copy virtual environment from builder
COPY --from=builder /opt/venv /opt/venv

# Create app directory structure
RUN mkdir -p /app/{config,data,logs,uploads,cache,checkpoints} && \
    chown -R llamaagent:llamaagent /app

# Copy application code
COPY --chown=llamaagent:llamaagent . /app/
WORKDIR /app

# Copy configuration files
COPY docker/nginx.conf /etc/nginx/nginx.conf
COPY docker/supervisord.conf /etc/supervisor/conf.d/supervisord.conf
COPY docker/entrypoint.sh /entrypoint.sh

# Make entrypoint executable
RUN chmod +x /entrypoint.sh

# Create health check script
RUN echo '#!/bin/bash\n\
curl -f http://localhost:8000/health || exit 1' > /app/healthcheck.sh && \
    chmod +x /app/healthcheck.sh

# Switch to non-root user
USER llamaagent

# Expose ports
EXPOSE 8000 8001 6379 5432

# Set health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD /app/healthcheck.sh

# Set entrypoint
ENTRYPOINT ["/entrypoint.sh"]

# Default command
CMD ["supervisord", "-c", "/etc/supervisor/conf.d/supervisord.conf"]

# Labels for metadata
LABEL maintainer="Nik Jois <nikjois@llamasearch.ai>" \
      version="1.0.0" \
      description="Complete LlamaAgent production environment" \
      org.opencontainers.image.title="LlamaAgent Complete" \
      org.opencontainers.image.description="Production-ready LlamaAgent with all features" \
      org.opencontainers.image.vendor="LlamaSearch AI" \
      org.opencontainers.image.version="1.0.0" \
      org.opencontainers.image.source="https://github.com/nikjois/llamaagent" 