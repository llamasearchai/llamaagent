version: '3.8'

# Production LlamaAgent Docker Compose Configuration
# Complete production setup with monitoring, databases, load balancing, and security
# Author: Nik Jois <nikjois@llamasearch.ai>

services:
  # =====================================
  # Core Application Services
  # =====================================
  
  # LlamaAgent API (Multiple instances for load balancing)
  llamaagent-api-1:
    build:
      context: .
      dockerfile: Dockerfile.production
      target: production
    container_name: llamaagent-api-1
    restart: unless-stopped
    environment:
      - HOST=0.0.0.0
      - PORT=8000
      - DEBUG=false
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-change-in-production}
      - CORS_ORIGINS=${CORS_ORIGINS:-*}
      - ENABLE_METRICS=true
      - ENABLE_AUTH=true
      - DATABASE_URL=postgresql://llamaagent:${DB_PASSWORD:-llamaagent_pass}@postgres:5432/llamaagent
      - REDIS_URL=redis://redis:6379/0
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY:-}
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
      - ./cache:/app/cache
    depends_on:
      - postgres
      - redis
    networks:
      - llamaagent-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  llamaagent-api-2:
    build:
      context: .
      dockerfile: Dockerfile.production
      target: production
    container_name: llamaagent-api-2
    restart: unless-stopped
    environment:
      - HOST=0.0.0.0
      - PORT=8000
      - DEBUG=false
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-change-in-production}
      - CORS_ORIGINS=${CORS_ORIGINS:-*}
      - ENABLE_METRICS=true
      - ENABLE_AUTH=true
      - DATABASE_URL=postgresql://llamaagent:${DB_PASSWORD:-llamaagent_pass}@postgres:5432/llamaagent
      - REDIS_URL=redis://redis:6379/0
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY:-}
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
      - ./cache:/app/cache
    depends_on:
      - postgres
      - redis
    networks:
      - llamaagent-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # =====================================
  # Load Balancer & Reverse Proxy
  # =====================================
  
  nginx:
    image: nginx:1.25-alpine
    container_name: llamaagent-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - llamaagent-api-1
      - llamaagent-api-2
    networks:
      - llamaagent-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M

  # =====================================
  # Database Services
  # =====================================
  
  postgres:
    image: postgres:15-alpine
    container_name: llamaagent-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=llamaagent
      - POSTGRES_USER=llamaagent
      - POSTGRES_PASSWORD=${DB_PASSWORD:-llamaagent_pass}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256 --auth-local=scram-sha-256
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - ./postgresql.conf:/etc/postgresql/postgresql.conf:ro
    networks:
      - llamaagent-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U llamaagent -d llamaagent"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  redis:
    image: redis:7-alpine
    container_name: llamaagent-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - llamaagent-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # =====================================
  # Monitoring & Observability
  # =====================================
  
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: llamaagent-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/alert_rules.yml:/etc/prometheus/alert_rules.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - llamaagent-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G

  grafana:
    image: grafana/grafana:10.0.0
    container_name: llamaagent-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SECURITY_DISABLE_GRAVATAR=true
      - GF_ANALYTICS_REPORTING_ENABLED=false
      - GF_ANALYTICS_CHECK_FOR_UPDATES=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks:
      - llamaagent-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  alertmanager:
    image: prom/alertmanager:v0.25.0
    container_name: llamaagent-alertmanager
    restart: unless-stopped
    command:
      - '--config.file=/etc/alertmanager/config.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
    volumes:
      - ./monitoring/alertmanager.yml:/etc/alertmanager/config.yml:ro
      - alertmanager_data:/alertmanager
    ports:
      - "9093:9093"
    networks:
      - llamaagent-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9093/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Node Exporter for system metrics
  node-exporter:
    image: prom/node-exporter:v1.6.0
    container_name: llamaagent-node-exporter
    restart: unless-stopped
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    ports:
      - "9100:9100"
    networks:
      - llamaagent-network
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 128M

  # cAdvisor for container metrics
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.0
    container_name: llamaagent-cadvisor
    restart: unless-stopped
    privileged: true
    devices:
      - /dev/kmsg:/dev/kmsg
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker:/var/lib/docker:ro
      - /cgroup:/cgroup:ro
    ports:
      - "8080:8080"
    networks:
      - llamaagent-network
    deploy:
      resources:
        limits:
          cpus: '0.3'
          memory: 256M

  # =====================================
  # Log Management
  # =====================================
  
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: llamaagent-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - llamaagent-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200/_cluster/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G

  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    container_name: llamaagent-kibana
    restart: unless-stopped
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - xpack.security.enabled=false
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - llamaagent-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5601/api/status"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # =====================================
  # Security & Backup
  # =====================================
  
  # Backup service
  backup:
    image: postgres:15-alpine
    container_name: llamaagent-backup
    restart: "no"
    environment:
      - PGPASSWORD=${DB_PASSWORD:-llamaagent_pass}
    volumes:
      - ./backups:/backups
      - ./scripts/backup.sh:/backup.sh:ro
    depends_on:
      - postgres
    networks:
      - llamaagent-network
    command: ["sh", "/backup.sh"]
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 256M

  # =====================================
  # Development & Testing (Optional)
  # =====================================
  
  # Development instance (only for dev environment)
  llamaagent-dev:
    build:
      context: .
      dockerfile: Dockerfile.production
      target: development
    container_name: llamaagent-dev
    restart: "no"
    environment:
      - HOST=0.0.0.0
      - PORT=8001
      - DEBUG=true
      - SECRET_KEY=dev-secret-key
      - ENABLE_AUTH=false
      - ENABLE_METRICS=true
    volumes:
      - .:/app
      - ./logs:/app/logs
    ports:
      - "8001:8001"
    networks:
      - llamaagent-network
    profiles:
      - dev
    command: ["python", "production_fastapi_app.py"]

  # Testing instance
  llamaagent-test:
    build:
      context: .
      dockerfile: Dockerfile.production
      target: testing
    container_name: llamaagent-test
    restart: "no"
    volumes:
      - .:/app
      - ./test-results:/app/test-results
    networks:
      - llamaagent-network
    profiles:
      - test
    command: ["python", "-m", "pytest", "test_production_app.py", "-v", "--junitxml=/app/test-results/results.xml"]

# =====================================
# Networks
# =====================================
networks:
  llamaagent-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# =====================================
# Volumes
# =====================================
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  alertmanager_data:
    driver: local
  elasticsearch_data:
    driver: local