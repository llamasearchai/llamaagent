[tox]
envlist = 
    py311
    py312
    lint
    type-check
    security
    docs
    coverage-report
requires = 
    tox>=4.0.0
    uv>=0.1.0
isolated_build = true

[testenv]
package = wheel
wheel_build_env = .pkg
deps = 
    pytest>=7.4.0
    pytest-asyncio>=0.21.0
    pytest-cov>=4.1.0
    pytest-xdist>=3.3.0
    pytest-mock>=3.11.0
    coverage[toml]>=7.0.0
extras = 
    dev
    all
commands = 
    pytest {posargs:tests} --cov=llamaagent --cov-report=term-missing --cov-report=xml --cov-report=html
allowlist_externals = 
    uv
    coverage
    echo
setenv = 
    PYTHONPATH = {toxinidir}/src
    COVERAGE_FILE = {toxworkdir}/.coverage.{envname}
    UV_CACHE_DIR = {toxworkdir}/.uv_cache

[testenv:py311]
basepython = python3.11

[testenv:py312]
basepython = python3.12

[testenv:lint]
deps = 
    ruff>=0.1.0
    black>=23.7.0
    isort>=5.12.0
commands = 
    ruff check src tests
    black --check --diff src tests
    ruff format --check src tests

[testenv:lint-fix]
deps = 
    ruff>=0.1.0
    black>=23.7.0
    isort>=5.12.0
commands = 
    black src tests
    ruff check --fix src tests
    ruff format src tests

[testenv:type-check]
deps = 
    mypy>=1.8.0
    types-PyYAML
    types-redis
    types-requests
    types-python-jose
    types-cryptography
commands = 
    mypy --install-types --non-interactive src/llamaagent tests

[testenv:security]
deps = 
    bandit[toml]>=1.7.0
    safety>=3.0.0
commands = 
    bandit -r src/llamaagent -f json -o {toxworkdir}/bandit-report.json
    bandit -r src/llamaagent
    safety check --json --output {toxworkdir}/safety-report.json
    safety check

[testenv:docs]
changedir = docs
deps = 
    sphinx>=7.0.0
    sphinx-rtd-theme>=2.0.0
    sphinx-autodoc-typehints>=1.24.0
    myst-parser>=2.0.0
commands = 
    sphinx-build -b html . _build/html
    sphinx-build -b linkcheck . _build/linkcheck

[testenv:docs-serve]
changedir = docs
deps = 
    sphinx>=7.0.0
    sphinx-rtd-theme>=2.0.0
    sphinx-autodoc-typehints>=1.24.0
    myst-parser>=2.0.0
commands = 
    sphinx-build -b html . _build/html
    python -m http.server 8000 --directory _build/html

[testenv:coverage-report]
deps = 
    coverage[toml]>=7.0.0
commands = 
    coverage combine
    coverage report
    coverage html
    coverage xml
depends = 
    py311
    py312

[testenv:benchmark]
deps = 
    pytest-benchmark>=5.1.0
    pytest>=7.4.0
    pytest-asyncio>=0.21.0
extras = 
    dev
    all
commands = 
    pytest tests/benchmarks --benchmark-only --benchmark-json={toxworkdir}/benchmark-report.json

[testenv:integration]
deps = 
    pytest>=7.4.0
    pytest-asyncio>=0.21.0
    pytest-xdist>=3.3.0
    docker>=6.0.0
    testcontainers>=3.7.0
extras = 
    dev
    all
commands = 
    pytest tests/integration -v --tb=short
passenv = 
    DOCKER_HOST
    DOCKER_TLS_VERIFY
    DOCKER_CERT_PATH

[testenv:e2e]
deps = 
    pytest>=7.4.0
    pytest-asyncio>=0.21.0
    httpx>=0.25.0
    docker>=6.0.0
extras = 
    dev
    all
commands = 
    pytest tests/e2e -v --tb=short
passenv = 
    DOCKER_HOST
    DOCKER_TLS_VERIFY
    DOCKER_CERT_PATH
    OPENAI_API_KEY
    ANTHROPIC_API_KEY

[testenv:clean]
deps = 
    coverage[toml]>=7.0.0
commands = 
    coverage erase
    python -c "import shutil; shutil.rmtree('htmlcov', ignore_errors=True)"
    python -c "import shutil; shutil.rmtree('.pytest_cache', ignore_errors=True)"
    python -c "import shutil; shutil.rmtree('build', ignore_errors=True)"
    python -c "import shutil; shutil.rmtree('dist', ignore_errors=True)"
    python -c "import shutil; shutil.rmtree('src/llamaagent.egg-info', ignore_errors=True)"
allowlist_externals = 
    python

[testenv:build]
deps = 
    build>=0.10.0
    twine>=4.0.0
commands = 
    python -m build
    twine check dist/*

[testenv:install-dev]
deps = 
    pip>=23.0.0
    uv>=0.1.0
commands = 
    uv pip install -e .[dev,all]
    pre-commit install

[testenv:pre-commit]
deps = 
    pre-commit>=3.5.0
commands = 
    pre-commit run --all-files

[testenv:update-deps]
deps = 
    pip-tools>=7.0.0
    uv>=0.1.0
commands = 
    uv pip compile pyproject.toml --output-file requirements.txt
    uv pip compile pyproject.toml --extra dev --output-file requirements-dev.txt
    uv pip compile pyproject.toml --extra all --output-file requirements-all.txt

[testenv:validate-imports]
deps = 
    importlib-metadata>=6.0.0
extras = 
    dev
commands = 
    python -c "import sys; sys.path.insert(0, 'src'); import llamaagent; print('✅ Main package imports successfully')"
    python -c "import sys; sys.path.insert(0, 'src'); from llamaagent.agents import ReactAgent; print('✅ ReactAgent imports successfully')"
    python -c "import sys; sys.path.insert(0, 'src'); from llamaagent.tools import CalculatorTool; print('✅ CalculatorTool imports successfully')"
    python -c "import sys; sys.path.insert(0, 'src'); from llamaagent.llm import LLMProvider; print('✅ LLMProvider imports successfully')"

[testenv:fix-imports]
deps = 
    autoflake>=2.0.0
    isort>=5.12.0
    black>=23.7.0
    ruff>=0.1.0
commands = 
    autoflake --in-place --remove-all-unused-imports --recursive src tests
    isort src tests
    black src tests
    ruff check --fix src tests

[testenv:syntax-check]
deps = 
    ast-walker>=0.2.0
commands = 
    python -m py_compile src/llamaagent/__init__.py
    python -m py_compile src/llamaagent/agents/__init__.py
    python -m py_compile src/llamaagent/tools/__init__.py
    python -m py_compile src/llamaagent/llm/__init__.py
    python -m py_compile src/llamaagent/api/__init__.py
    python -c "import ast; [ast.parse(open(f).read()) for f in ['src/llamaagent/__init__.py', 'src/llamaagent/agents/__init__.py', 'src/llamaagent/tools/__init__.py']]; print('✅ Critical files have valid syntax')"

[testenv:performance]
deps = 
    pytest>=7.4.0
    pytest-benchmark>=5.1.0
    memory-profiler>=0.61.0
    psutil>=5.9.0
extras = 
    dev
    all
commands = 
    pytest tests/performance --benchmark-only --benchmark-json={toxworkdir}/performance-report.json
    python -m memory_profiler tests/performance/memory_test.py

[testenv:compatibility]
deps = 
    pytest>=7.4.0
    pytest-asyncio>=0.21.0
    packaging>=23.0
extras = 
    dev
commands = 
    python -c "import sys; print(f'Python version: {sys.version}')"
    python -c "import platform; print(f'Platform: {platform.platform()}')"
    pytest tests/compatibility -v

[flake8]
max-line-length = 88
extend-ignore = E203, E501, W503
per-file-ignores = 
    __init__.py:F401
    tests/*:S101

[coverage:run]
source = src
branch = true
parallel = true
omit = 
    src/llamaagent/__about__.py
    tests/*
    */tests/*
    */__pycache__/*
    */site-packages/*

[coverage:paths]
source = 
    src/llamaagent
    */llamaagent/src/llamaagent
    */site-packages/llamaagent

[coverage:report]
exclude_lines = 
    pragma: no cover
    def __repr__
    if self.debug:
    if settings.DEBUG
    raise AssertionError
    raise NotImplementedError
    if 0:
    if False:
    if TYPE_CHECKING:
    class .*\bProtocol\):
    @(abc\.)?abstractmethod
show_missing = true
precision = 2
fail_under = 80

[coverage:xml]
output = coverage.xml

[coverage:html]
directory = htmlcov
show_contexts = true 