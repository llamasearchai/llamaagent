# Advanced Docker Compose configuration for LlamaAgent
# Author: Nik Jois <nikjois@llamasearch.ai>

services:
  # Main LlamaAgent application
  llamaagent:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=docker
      - DATABASE_URL=postgresql://llamaagent:llamaagent@postgres:5432/llamaagent
      - REDIS_URL=redis://redis:6379
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY:-}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./src:/app/src
      - ./tests:/app/tests
      - ./benchmark_results:/app/benchmark_results
    networks:
      - llamaagent
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL database with pgvector
  postgres:
    image: pgvector/pgvector:pg16
    container_name: llamaagent-postgres
    restart: unless-stopped
    
    environment:
      - POSTGRES_DB=llamaagent
      - POSTGRES_USER=llamaagent  
      - POSTGRES_PASSWORD=llamaagent
      - POSTGRES_HOST_AUTH_METHOD=trust
    
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    
    ports:
      - "5432:5432"
    
    networks:
      - llamaagent
    
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U llamaagent -d llamaagent"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and session storage
  redis:
    image: redis:7-alpine
    container_name: llamaagent-redis
    restart: unless-stopped
    
    command: redis-server --appendonly yes
    
    volumes:
      - redis_data:/data
    
    ports:
      - "6379:6379"
    
    networks:
      - llamaagent
    
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Ollama LLM backend
  ollama:
    image: ollama/ollama:latest
    container_name: llamaagent-ollama
    restart: unless-stopped
    
    ports:
      - "11434:11434"
    
    volumes:
      - ollama-data:/root/.ollama
    
    networks:
      - llamaagent
    
    environment:
      - OLLAMA_HOST=0.0.0.0
      - OLLAMA_ORIGINS=*
    
    # Pull and setup default model
    entrypoint: ["/bin/sh", "-c"]
    command:
      - |
        ollama serve &
        sleep 10
        ollama pull ${LLM_MODEL:-llama3.2:3b}
        wait

  # Prometheus monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: llamaagent-prometheus
    restart: unless-stopped
    
    ports:
      - "9090:9090"
    
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    
    networks:
      - llamaagent
    
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  # Grafana dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: llamaagent-grafana
    restart: unless-stopped
    
    ports:
      - "3000:3000"
    
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    
    networks:
      - llamaagent
    
    depends_on:
      - prometheus

  # NGINX reverse proxy and load balancer
  nginx:
    image: nginx:alpine
    container_name: llamaagent-nginx
    restart: unless-stopped
    
    ports:
      - "80:80"
      - "443:443"
    
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx-logs:/var/log/nginx
    
    networks:
      - llamaagent
    
    depends_on:
      - llamaagent

  # Log aggregation with ELK stack
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: llamaagent-elasticsearch
    restart: unless-stopped
    
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
      - xpack.security.enabled=false
    
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    
    ports:
      - "9200:9200"
    
    networks:
      - llamaagent

  logstash:
    image: docker.elastic.co/logstash/logstash:8.8.0
    container_name: llamaagent-logstash
    restart: unless-stopped
    
    volumes:
      - ./logging/logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro
      - llamaagent-logs:/app/logs:ro
    
    networks:
      - llamaagent
    
    depends_on:
      - elasticsearch

  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    container_name: llamaagent-kibana
    restart: unless-stopped
    
    ports:
      - "5601:5601"
    
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    
    networks:
      - llamaagent
    
    depends_on:
      - elasticsearch

  # Development tools and utilities
  adminer:
    image: adminer:latest
    container_name: llamaagent-adminer
    restart: unless-stopped
    profiles:
      - development
    
    ports:
      - "8080:8080"
    
    networks:
      - llamaagent
    
    depends_on:
      - postgres

  # Health check and monitoring dashboard
  uptime-kuma:
    image: louislam/uptime-kuma:latest
    container_name: llamaagent-uptime
    restart: unless-stopped
    profiles:
      - monitoring
    
    ports:
      - "3001:3001"
    
    volumes:
      - uptime-data:/app/data
    
    networks:
      - llamaagent

# Named volumes for persistent data
volumes:
  postgres_data:
    name: llamaagent-postgres-data
  redis_data:
    name: llamaagent-redis-data
  ollama-data:
    name: llamaagent-ollama-data
  prometheus-data:
    name: llamaagent-prometheus-data
  grafana-data:
    name: llamaagent-grafana-data
  elasticsearch-data:
    name: llamaagent-elasticsearch-data
  nginx-logs:
    name: llamaagent-nginx-logs
  llamaagent-logs:
    name: llamaagent-logs
  uptime-data:
    name: llamaagent-uptime-data

# Custom network for service communication
networks:
  llamaagent:
    name: llamaagent
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16